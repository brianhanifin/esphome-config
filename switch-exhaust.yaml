---
# Device: Shelly 1 PM
# Location: Upstairs bathroom in wall
#
substitutions:
  project: Upstairs bathroom exhaust
  id: switch_exhaust
  hostname: switch-exhaust
  ip: 10.0.20.50

  #humidity_reference_sensor: "sensor.upstairs_bathroom_humidity_average_last_24_hours"
  humidity_reference_sensor: "sensor.upstairs_humidity_average"
  #humidity_reference_sensor: "input_number.test"
  remaining_time_duration: "600"                  # 600 seconds = 10 minutes
  stuck_duration: "1min"
  max_temp: "70.0"                                # Max power measurement board temperature in Â°C.

  <<: !include common/substitutions/gpio/shelly1pm.yaml

esphome:
  name: $hostname
  friendly_name: $project
  on_boot:
    - sensor.template.publish:
        id: remaining_time
        state: 0
    - script.execute:
        id: status_set
        value: "BOOT"

esp8266:
  board: esp01_1m
  framework:
    version: recommended
  restore_from_flash: true

<<: !include common/common.yaml

globals:
  - id: current_status
    type: std::string
    initial_value: ""

  - id: previous_status
    type: std::string
    initial_value: ""

interval:
  - interval: 5s
    then:
      # Update the current status.
      - script.execute: humidity_delta_calculate
      - script.execute: humidity_status_update
      - script.execute: motion_status_update

      # Continue the countdown, then take action.
      - script.execute: remaining_time_decrement
      - script.execute: status_change_actions

script:
  ################################
  # TAKE ACTION ON STATUS CHANGE #
  ################################
  - id: status_change_actions
    then:
      #- logger.log: "##### status_change_actions"
      # OFF, WARM, BOOT
      # MANUAL_ON, PHYSICAL, VIRTUAL
      # MOTION_DETECTED, MOTION_CLEARED, HUMIDITY_LOWER, HUMIDITY_UPPER, WARM_STUCK
      - if:
          condition:
            or:
              - lambda: return id(current_status) == "PHYSICAL";
              - lambda: return id(current_status) == "VIRTUAL";
              - lambda: return id(current_status) == "MOTION_DETECTED";
              - lambda: return id(current_status) == "MOTION_CLEARED";
              - lambda: return id(current_status) == "HUMIDITY_LOWER";
              - lambda: return id(current_status) == "HUMIDITY_UPPER";
              - lambda: return id(current_status) == "WARM_STUCK";
          then:
            - script.execute: relay_on

            # Start the countdown in these cases.
            - if:
                condition:
                  and:
                    - lambda: return id(humidity_delta).state <= id(delta_lower_trigger).state;
                    - or:
                        - lambda: return id(current_status) == "PHYSICAL";
                        - lambda: return id(current_status) == "VIRTUAL";
                        - lambda: return id(current_status) == "MOTION_CLEARED";
                        - lambda: return id(current_status) == "HUMIDITY_LOWER";
                then:
                  - script.execute: remaining_time_start

            # Stop the countdown in these cases.
            - if:
                condition:
                  or:
                    - lambda: return id(current_status) == "MOTION_DETECTED";
                    - lambda: return id(current_status) == "HUMIDITY_UPPER";
                    - lambda: return id(current_status) == "WARM_STUCK";
                    - lambda: return id(humidity_delta).state >= id(delta_lower_trigger).state;
                then:
                  - script.execute: remaining_time_clear

          else:
            - if:
                condition:
                  and:
                    - lambda: return id(current_status) == "OFF";
                    - lambda: return id(humidity_delta).state <= id(delta_lower_trigger).state;
                then:
                  - script.execute: relay_off

            - if:
                condition:
                  and:
                    - lambda: return id(previous_status) != "BOOT";
                    - or:
                        - lambda: return id(current_status) == "WARM";
                        - lambda: return id(current_status) == "BOOT";
                then:
                  - script.execute: relay_off

  ###########################
  # STATUS CHANGING ACTIONS #
  ###########################
  - id: humidity_delta_calculate
    then:
      #- logger.log: "##### humidity_delta_calculate"
      # Recalculate the difference between the bathroom humidity and the reference humidity.
      - sensor.template.publish:
          id: humidity_delta
          state: !lambda return id(humidity_now).state - id(humidity_reference).state;

  - id: humidity_status_update
    then:
      #- logger.log: "##### humidity_status_update"
      # When MOTION_DETECTED and the humidity is between the lower and upper trigger values.
      - if:
          condition:
            and:
              - lambda: return id(humidity_delta).state > id(delta_lower_trigger).state;
              - lambda: return id(humidity_delta).state < id(delta_upper_trigger).state;
              # ... and the humidity delta was NOT previously HUMIDITY_UPPER.
              - lambda: return id(current_status) != "HUMIDITY_UPPER";
              - lambda: return id(current_status) != "WARM_STUCK";
              #- switch.is_on: relay
          then:
            # Humidity has entered the warming zone.
            - script.execute:
                id: status_set
                value: "WARM"

      # When the humidity is in the warming zone and the upper trigger is reached.
      - if:
          condition:
            and:
              - lambda: return id(current_status) == "WARM";
              - lambda: return id(humidity_delta).state >= id(delta_upper_trigger).state;
          then:
            # Set the new status.
            - script.execute:
                id: status_set
                value: "HUMIDITY_UPPER"

      # When the humidity reaches or falls below the lower trigger.
      - if:
          condition:
            and:
              - lambda: return id(humidity_delta).state <= id(delta_lower_trigger).state;
              # But only when one of the following are the current state.
              - or:
                  - lambda: return id(current_status) == "HUMIDITY_UPPER";
                  - lambda: return id(current_status) == "WARM_STUCK";
                  - lambda: return id(current_status) == "WARM";
          then:
            - script.execute:
                id: status_set
                value: "HUMIDITY_LOWER"

  - id: motion_status_update
    then:
      #- logger.log: "##### motion_status_update"
      # Ignore motion state changes when the following states are active.
      - if:
          condition:
            and:
              - lambda: return id(current_status) != "WARM";
              - lambda: return id(current_status) != "HUMIDITY_UPPER";
              - lambda: return id(current_status) != "WARM_STUCK";
          then:
            - if:
                condition:
                  and:
                    - binary_sensor.is_on: motion
                    - lambda: return id(current_status) != "MOTION_DETECTED";
                then:
                  - script.execute:
                      id: status_set
                      value: "MOTION_DETECTED"

            - if:
                condition:
                  and:
                    - binary_sensor.is_off: motion
                    - lambda: return id(current_status) == "MOTION_DETECTED";
                then:
                  - script.execute:
                      id: status_set
                      value: "MOTION_CLEARED"

  - id: warm_stuck_update
    then:
      #- logger.log: "##### warm_stuck_update"
      - if:
          condition:
            for:
              time: $stuck_duration
              condition:
                - lambda: return id(current_status) == "WARM";
          then:
            # When warm is stuck start clearning out the humidity.
            - script.execute:
                id: status_set
                value: "WARM_STUCK"

  ###################
  # UTILITY ACTIONS #
  ###################
  - id: relay_off
    then:
      #- logger.log: "##### relay_off"
      - if:
          condition:
            - switch.is_on: relay
          then:
            - switch.turn_off: relay

            - script.execute: remaining_time_clear

  - id: relay_on
    then:
      #- logger.log: "##### relay_on"
      - if:
          condition:
            - switch.is_off: relay
          then:
            - switch.turn_on: relay

  - id: remaining_time_clear
    then:
      #- logger.log: "##### remaining_time_clear"
      - if:
          condition:
            - lambda: return id(remaining_time).state > 0;
          then:
            - sensor.template.publish:
                id: remaining_time
                state: "0"

  - id: remaining_time_decrement
    then:
      #- logger.log: "##### remaining_time_decrement"
      - if:
          condition:
            - lambda: return id(remaining_time).state > 0;
          then:
            # Decrement the timer.
            - sensor.template.publish:
                id: remaining_time
                state: !lambda return id(remaining_time).state -= 5;

            # Set the state to "OFF" when the remaining time reaches zero.
            - if:
                condition:
                  - lambda: return id(remaining_time).state == 0;
                then:
                  - script.execute:
                      id: status_set
                      value: "OFF"

  - id: remaining_time_start
    then:
      #- logger.log: "##### remaining_time_start"
      - if:
          condition:
            and:
              - lambda: return id(remaining_time).state == 0;
              - switch.is_on: relay
              - lambda: return id(previous_status) != id(current_status);
          then:
            - sensor.template.publish:
                id: remaining_time
                state: !lambda return $remaining_time_duration;

  - id: status_set
    parameters:
      value: string
    then:
      #- logger.log: "##### status_set"

      - if:
          condition:
            - lambda: return id(current_status) != value;
          then:
            # Store previous state.
            - globals.set:
                id: previous_status
                value: !lambda return id(current_status);

            # Store the changed value.
            - globals.set:
                id: current_status
                value: !lambda return value;

            # Update the status sensor.
            - text_sensor.template.publish:
                id: status
                state: !lambda return value;

binary_sensor:
  # - id: physical_switch
  #   platform: gpio
  #   internal: true
  #   pin:
  #     number: $button_gpio
  #   filters:
  #     - delayed_on_off: 50ms
  #   on_state:
  #     # Set the new status.
  #     - if:
  #         condition:
  #           - binary_sensor.is_on: physical_switch
  #         then:
  #           - switch.turn_on: relay
  #           - script.execute:
  #               id: status_set
  #               value: "PHYSICAL"
  #         else:
  #           - script.execute:
  #               id: status_set
  #               value: "OFF"

  - id: motion
    platform: homeassistant
    entity_id: binary_sensor.upstairs_bathroom_motion

number:
  - id: delta_lower_trigger
    platform: template
    name: "humidity delta lower trigger"
    icon: "mdi:timer-stop"
    entity_category: config
    unit_of_measurement: "%"
    optimistic: true
    restore_value: true
    min_value: 0.5
    max_value: 15.0
    step: 0.5

  - id: delta_upper_trigger
    platform: template
    name: "humidity delta upper trigger"
    icon: "mdi:timer-play"
    entity_category: config
    unit_of_measurement: "%"
    optimistic: true
    restore_value: true
    min_value: 0.5
    max_value: 30.0
    step: 0.5

sensor:
  - id: humidity_delta
    platform: template
    name: "humidity delta"
    accuracy_decimals: 1
    icon: "mdi:delta"
    entity_category: diagnostic
    unit_of_measurement: "%"

  - id: humidity_now
    platform: homeassistant
    internal: true
    accuracy_decimals: 1
    entity_id: sensor.upstairs_bathroom_humidity
    unit_of_measurement: "%"

  - id: humidity_reference
    platform: homeassistant
    internal: true
    accuracy_decimals: 1
    entity_id: $humidity_reference_sensor
    unit_of_measurement: "%"

  - id: remaining_time
    platform: template
    name: "remaining time"
    icon: "mdi:sort-clock-ascending"
    accuracy_decimals: 0
    entity_category: diagnostic
    unit_of_measurement: "seconds"

  ## Power monitoring
  - platform: adc
    id: temp_analog_reading
    pin: A0

  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "power"
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 1.0
            - 110.33186 -> 20.62
            - 131.01909 -> 24.32
            - 341.33920 -> 62.08
            - 5561.41553 -> 1000.0
            - 2975.51221 -> 535.7
            - 9612.66309 -> 1720.0
            - 14891.35352 -> 2679.0
        # Make everything below 2W appear as just 0W.
        - lambda: if (x < 2) return 0; else return x;
    update_interval: 60s

  - platform: total_daily_energy
    name: "daily energy"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    filters:
      - multiply: 0.001

  # Temperature overheat monitoring.
  - platform: ntc
    sensor: temp_resistance_reading
    name: "temperature"
    accuracy_decimals: 1
    device_class: temperature
    unit_of_measurement: "Â°C"
    disabled_by_default: true
    entity_category: diagnostic
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: $max_temp
        then:
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "$project has overheated."

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm

switch:
  - id: relay
    platform: gpio
    pin: $relay_gpio

  - id: virtual_switch
    platform: template
    name: switch
    turn_off_action:
      - script.execute:
          id: status_set
          value: "OFF"
    turn_on_action:
      - script.execute:
          id: status_set
          value: "VIRTUAL"
    lambda: |-
      std::string off_values[3] = {"OFF", "WARM", "BOOT"};
      bool result = true;
      for (int i=0; i<sizeof(off_values); i++) {
        if (id(current_status) == off_values[i]) result = false;
      }
      return result;

text_sensor:
  - id: status
    platform: template
    name: "status"
    entity_category: diagnostic
    on_value:
      then:
        - script.execute: warm_stuck_update

time:
  - id: homeassistant_time
    platform: homeassistant
    timezone: America/Los_Angeles
